// automatically generated by the FlatBuffers compiler, do not modify

package vn.com.vng.gsmobile.casino.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Player3LaCardInfo extends Table {
  public static Player3LaCardInfo getRootAsPlayer3LaCardInfo(ByteBuffer _bb) { return getRootAsPlayer3LaCardInfo(_bb, new Player3LaCardInfo()); }
  public static Player3LaCardInfo getRootAsPlayer3LaCardInfo(ByteBuffer _bb, Player3LaCardInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public Player3LaCardInfo __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long playerId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutatePlayerId(long player_id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, player_id); return true; } else { return false; } }
  public Card3LaInfo cards(int j) { return cards(new Card3LaInfo(), j); }
  public Card3LaInfo cards(Card3LaInfo obj, int j) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int cardsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createPlayer3LaCardInfo(FlatBufferBuilder builder,
      long player_id,
      int cardsOffset) {
    builder.startObject(2);
    Player3LaCardInfo.addPlayerId(builder, player_id);
    Player3LaCardInfo.addCards(builder, cardsOffset);
    return Player3LaCardInfo.endPlayer3LaCardInfo(builder);
  }

  public static void startPlayer3LaCardInfo(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addPlayerId(FlatBufferBuilder builder, long playerId) { builder.addLong(0, playerId, 0); }
  public static void addCards(FlatBufferBuilder builder, int cardsOffset) { builder.addOffset(1, cardsOffset, 0); }
  public static int createCardsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCardsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPlayer3LaCardInfo(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

