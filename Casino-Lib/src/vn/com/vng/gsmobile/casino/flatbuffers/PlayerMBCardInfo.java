// automatically generated by the FlatBuffers compiler, do not modify

package vn.com.vng.gsmobile.casino.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class PlayerMBCardInfo extends Table {
  public static PlayerMBCardInfo getRootAsPlayerMBCardInfo(ByteBuffer _bb) { return getRootAsPlayerMBCardInfo(_bb, new PlayerMBCardInfo()); }
  public static PlayerMBCardInfo getRootAsPlayerMBCardInfo(ByteBuffer _bb, PlayerMBCardInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public PlayerMBCardInfo __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long playerId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutatePlayerId(long player_id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, player_id); return true; } else { return false; } }
  public int cards(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int cardsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer cardsAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public boolean mutateCards(int j, int cards) { int o = __offset(6); if (o != 0) { bb.put(__vector(o) + j * 1, (byte)cards); return true; } else { return false; } }
  public byte chiType(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int chiTypeLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer chiTypeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public boolean mutateChiType(int j, byte chi_type) { int o = __offset(8); if (o != 0) { bb.put(__vector(o) + j * 1, chi_type); return true; } else { return false; } }
  public byte handType() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateHandType(byte hand_type) { int o = __offset(10); if (o != 0) { bb.put(o + bb_pos, hand_type); return true; } else { return false; } }
  public int showType() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateShowType(int show_type) { int o = __offset(12); if (o != 0) { bb.put(o + bb_pos, (byte)show_type); return true; } else { return false; } }

  public static int createPlayerMBCardInfo(FlatBufferBuilder builder,
      long player_id,
      int cardsOffset,
      int chi_typeOffset,
      byte hand_type,
      int show_type) {
    builder.startObject(5);
    PlayerMBCardInfo.addPlayerId(builder, player_id);
    PlayerMBCardInfo.addChiType(builder, chi_typeOffset);
    PlayerMBCardInfo.addCards(builder, cardsOffset);
    PlayerMBCardInfo.addShowType(builder, show_type);
    PlayerMBCardInfo.addHandType(builder, hand_type);
    return PlayerMBCardInfo.endPlayerMBCardInfo(builder);
  }

  public static void startPlayerMBCardInfo(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addPlayerId(FlatBufferBuilder builder, long playerId) { builder.addLong(0, playerId, 0); }
  public static void addCards(FlatBufferBuilder builder, int cardsOffset) { builder.addOffset(1, cardsOffset, 0); }
  public static int createCardsVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startCardsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addChiType(FlatBufferBuilder builder, int chiTypeOffset) { builder.addOffset(2, chiTypeOffset, 0); }
  public static int createChiTypeVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startChiTypeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addHandType(FlatBufferBuilder builder, byte handType) { builder.addByte(3, handType, 0); }
  public static void addShowType(FlatBufferBuilder builder, int showType) { builder.addByte(4, (byte)showType, 0); }
  public static int endPlayerMBCardInfo(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

