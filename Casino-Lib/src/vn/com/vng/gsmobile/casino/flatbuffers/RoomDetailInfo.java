// automatically generated by the FlatBuffers compiler, do not modify

package vn.com.vng.gsmobile.casino.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RoomDetailInfo extends Table {
  public static RoomDetailInfo getRootAsRoomDetailInfo(ByteBuffer _bb) { return getRootAsRoomDetailInfo(_bb, new RoomDetailInfo()); }
  public static RoomDetailInfo getRootAsRoomDetailInfo(ByteBuffer _bb, RoomDetailInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public RoomDetailInfo __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int hostIdx() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateHostIdx(int host_idx) { int o = __offset(4); if (o != 0) { bb.put(o + bb_pos, (byte)host_idx); return true; } else { return false; } }
  public long playerId(int j) { int o = __offset(6); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int playerIdLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer playerIdAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public boolean mutatePlayerId(int j, long player_id) { int o = __offset(6); if (o != 0) { bb.putLong(__vector(o) + j * 8, player_id); return true; } else { return false; } }

  public static int createRoomDetailInfo(FlatBufferBuilder builder,
      int host_idx,
      int player_idOffset) {
    builder.startObject(2);
    RoomDetailInfo.addPlayerId(builder, player_idOffset);
    RoomDetailInfo.addHostIdx(builder, host_idx);
    return RoomDetailInfo.endRoomDetailInfo(builder);
  }

  public static void startRoomDetailInfo(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addHostIdx(FlatBufferBuilder builder, int hostIdx) { builder.addByte(0, (byte)hostIdx, 0); }
  public static void addPlayerId(FlatBufferBuilder builder, int playerIdOffset) { builder.addOffset(1, playerIdOffset, 0); }
  public static int createPlayerIdVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startPlayerIdVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endRoomDetailInfo(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

