// automatically generated by the FlatBuffers compiler, do not modify

package vn.com.vng.gsmobile.casino.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CMDGameMBShowCards extends Table {
  public static CMDGameMBShowCards getRootAsCMDGameMBShowCards(ByteBuffer _bb) { return getRootAsCMDGameMBShowCards(_bb, new CMDGameMBShowCards()); }
  public static CMDGameMBShowCards getRootAsCMDGameMBShowCards(ByteBuffer _bb, CMDGameMBShowCards obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public CMDGameMBShowCards __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long roomId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateRoomId(long room_id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, room_id); return true; } else { return false; } }
  public long gameId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateGameId(long game_id) { int o = __offset(6); if (o != 0) { bb.putLong(o + bb_pos, game_id); return true; } else { return false; } }
  public int playerIdx() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutatePlayerIdx(int player_idx) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, (byte)player_idx); return true; } else { return false; } }
  public int cards(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int cardsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer cardsAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public boolean mutateCards(int j, int cards) { int o = __offset(10); if (o != 0) { bb.put(__vector(o) + j * 1, (byte)cards); return true; } else { return false; } }
  public int showType() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateShowType(int show_type) { int o = __offset(12); if (o != 0) { bb.put(o + bb_pos, (byte)show_type); return true; } else { return false; } }
  public long showId() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateShowId(long show_id) { int o = __offset(14); if (o != 0) { bb.putLong(o + bb_pos, show_id); return true; } else { return false; } }

  public static int createCMDGameMBShowCards(FlatBufferBuilder builder,
      long room_id,
      long game_id,
      int player_idx,
      int cardsOffset,
      int show_type,
      long show_id) {
    builder.startObject(6);
    CMDGameMBShowCards.addShowId(builder, show_id);
    CMDGameMBShowCards.addGameId(builder, game_id);
    CMDGameMBShowCards.addRoomId(builder, room_id);
    CMDGameMBShowCards.addCards(builder, cardsOffset);
    CMDGameMBShowCards.addShowType(builder, show_type);
    CMDGameMBShowCards.addPlayerIdx(builder, player_idx);
    return CMDGameMBShowCards.endCMDGameMBShowCards(builder);
  }

  public static void startCMDGameMBShowCards(FlatBufferBuilder builder) { builder.startObject(6); }
  public static void addRoomId(FlatBufferBuilder builder, long roomId) { builder.addLong(0, roomId, 0); }
  public static void addGameId(FlatBufferBuilder builder, long gameId) { builder.addLong(1, gameId, 0); }
  public static void addPlayerIdx(FlatBufferBuilder builder, int playerIdx) { builder.addByte(2, (byte)playerIdx, 0); }
  public static void addCards(FlatBufferBuilder builder, int cardsOffset) { builder.addOffset(3, cardsOffset, 0); }
  public static int createCardsVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startCardsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addShowType(FlatBufferBuilder builder, int showType) { builder.addByte(4, (byte)showType, 0); }
  public static void addShowId(FlatBufferBuilder builder, long showId) { builder.addLong(5, showId, 0); }
  public static int endCMDGameMBShowCards(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

