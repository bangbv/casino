// automatically generated by the FlatBuffers compiler, do not modify

package vn.com.vng.gsmobile.casino.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CMDGameTLMNShow extends Table {
  public static CMDGameTLMNShow getRootAsCMDGameTLMNShow(ByteBuffer _bb) { return getRootAsCMDGameTLMNShow(_bb, new CMDGameTLMNShow()); }
  public static CMDGameTLMNShow getRootAsCMDGameTLMNShow(ByteBuffer _bb, CMDGameTLMNShow obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public CMDGameTLMNShow __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long roomId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateRoomId(long room_id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, room_id); return true; } else { return false; } }
  public long gameId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateGameId(long game_id) { int o = __offset(6); if (o != 0) { bb.putLong(o + bb_pos, game_id); return true; } else { return false; } }
  public int turnIdx() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateTurnIdx(int turn_idx) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, (byte)turn_idx); return true; } else { return false; } }
  public int playerIdx() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutatePlayerIdx(int player_idx) { int o = __offset(10); if (o != 0) { bb.put(o + bb_pos, (byte)player_idx); return true; } else { return false; } }
  public int cardList(int j) { int o = __offset(12); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int cardListLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer cardListAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public boolean mutateCardList(int j, int card_list) { int o = __offset(12); if (o != 0) { bb.put(__vector(o) + j * 1, (byte)card_list); return true; } else { return false; } }
  public int isBonDoiThong() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateIsBonDoiThong(int is_bon_doi_thong) { int o = __offset(14); if (o != 0) { bb.put(o + bb_pos, (byte)is_bon_doi_thong); return true; } else { return false; } }

  public static int createCMDGameTLMNShow(FlatBufferBuilder builder,
      long room_id,
      long game_id,
      int turn_idx,
      int player_idx,
      int card_listOffset,
      int is_bon_doi_thong) {
    builder.startObject(6);
    CMDGameTLMNShow.addGameId(builder, game_id);
    CMDGameTLMNShow.addRoomId(builder, room_id);
    CMDGameTLMNShow.addCardList(builder, card_listOffset);
    CMDGameTLMNShow.addIsBonDoiThong(builder, is_bon_doi_thong);
    CMDGameTLMNShow.addPlayerIdx(builder, player_idx);
    CMDGameTLMNShow.addTurnIdx(builder, turn_idx);
    return CMDGameTLMNShow.endCMDGameTLMNShow(builder);
  }

  public static void startCMDGameTLMNShow(FlatBufferBuilder builder) { builder.startObject(6); }
  public static void addRoomId(FlatBufferBuilder builder, long roomId) { builder.addLong(0, roomId, 0); }
  public static void addGameId(FlatBufferBuilder builder, long gameId) { builder.addLong(1, gameId, 0); }
  public static void addTurnIdx(FlatBufferBuilder builder, int turnIdx) { builder.addByte(2, (byte)turnIdx, 0); }
  public static void addPlayerIdx(FlatBufferBuilder builder, int playerIdx) { builder.addByte(3, (byte)playerIdx, 0); }
  public static void addCardList(FlatBufferBuilder builder, int cardListOffset) { builder.addOffset(4, cardListOffset, 0); }
  public static int createCardListVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startCardListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addIsBonDoiThong(FlatBufferBuilder builder, int isBonDoiThong) { builder.addByte(5, (byte)isBonDoiThong, 0); }
  public static int endCMDGameTLMNShow(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

