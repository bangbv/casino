// automatically generated by the FlatBuffers compiler, do not modify

package vn.com.vng.gsmobile.casino.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CMDGameTLMNUpdate extends Table {
  public static CMDGameTLMNUpdate getRootAsCMDGameTLMNUpdate(ByteBuffer _bb) { return getRootAsCMDGameTLMNUpdate(_bb, new CMDGameTLMNUpdate()); }
  public static CMDGameTLMNUpdate getRootAsCMDGameTLMNUpdate(ByteBuffer _bb, CMDGameTLMNUpdate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public CMDGameTLMNUpdate __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long roomId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateRoomId(long room_id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, room_id); return true; } else { return false; } }
  public long gameId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateGameId(long game_id) { int o = __offset(6); if (o != 0) { bb.putLong(o + bb_pos, game_id); return true; } else { return false; } }
  public int showedPlayerIdx() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateShowedPlayerIdx(int showed_player_idx) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, (byte)showed_player_idx); return true; } else { return false; } }
  public int showedCards(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int showedCardsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer showedCardsAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public boolean mutateShowedCards(int j, int showed_cards) { int o = __offset(10); if (o != 0) { bb.put(__vector(o) + j * 1, (byte)showed_cards); return true; } else { return false; } }
  public int nextPlayerIdx() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateNextPlayerIdx(int next_player_idx) { int o = __offset(12); if (o != 0) { bb.put(o + bb_pos, (byte)next_player_idx); return true; } else { return false; } }
  public int nextTurnIdx() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateNextTurnIdx(int next_turn_idx) { int o = __offset(14); if (o != 0) { bb.put(o + bb_pos, (byte)next_turn_idx); return true; } else { return false; } }
  public int nextRingIdx() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateNextRingIdx(int next_ring_idx) { int o = __offset(16); if (o != 0) { bb.put(o + bb_pos, (byte)next_ring_idx); return true; } else { return false; } }
  public int state() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateState(int state) { int o = __offset(18); if (o != 0) { bb.put(o + bb_pos, (byte)state); return true; } else { return false; } }
  public long timeRemaining() { int o = __offset(20); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateTimeRemaining(long time_remaining) { int o = __offset(20); if (o != 0) { bb.putLong(o + bb_pos, time_remaining); return true; } else { return false; } }
  public GameTLMNInterruptInfo interrupt() { return interrupt(new GameTLMNInterruptInfo()); }
  public GameTLMNInterruptInfo interrupt(GameTLMNInterruptInfo obj) { int o = __offset(22); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }

  public static int createCMDGameTLMNUpdate(FlatBufferBuilder builder,
      long room_id,
      long game_id,
      int showed_player_idx,
      int showed_cardsOffset,
      int next_player_idx,
      int next_turn_idx,
      int next_ring_idx,
      int state,
      long time_remaining,
      int interruptOffset) {
    builder.startObject(10);
    CMDGameTLMNUpdate.addTimeRemaining(builder, time_remaining);
    CMDGameTLMNUpdate.addGameId(builder, game_id);
    CMDGameTLMNUpdate.addRoomId(builder, room_id);
    CMDGameTLMNUpdate.addInterrupt(builder, interruptOffset);
    CMDGameTLMNUpdate.addShowedCards(builder, showed_cardsOffset);
    CMDGameTLMNUpdate.addState(builder, state);
    CMDGameTLMNUpdate.addNextRingIdx(builder, next_ring_idx);
    CMDGameTLMNUpdate.addNextTurnIdx(builder, next_turn_idx);
    CMDGameTLMNUpdate.addNextPlayerIdx(builder, next_player_idx);
    CMDGameTLMNUpdate.addShowedPlayerIdx(builder, showed_player_idx);
    return CMDGameTLMNUpdate.endCMDGameTLMNUpdate(builder);
  }

  public static void startCMDGameTLMNUpdate(FlatBufferBuilder builder) { builder.startObject(10); }
  public static void addRoomId(FlatBufferBuilder builder, long roomId) { builder.addLong(0, roomId, 0); }
  public static void addGameId(FlatBufferBuilder builder, long gameId) { builder.addLong(1, gameId, 0); }
  public static void addShowedPlayerIdx(FlatBufferBuilder builder, int showedPlayerIdx) { builder.addByte(2, (byte)showedPlayerIdx, 0); }
  public static void addShowedCards(FlatBufferBuilder builder, int showedCardsOffset) { builder.addOffset(3, showedCardsOffset, 0); }
  public static int createShowedCardsVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startShowedCardsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addNextPlayerIdx(FlatBufferBuilder builder, int nextPlayerIdx) { builder.addByte(4, (byte)nextPlayerIdx, 0); }
  public static void addNextTurnIdx(FlatBufferBuilder builder, int nextTurnIdx) { builder.addByte(5, (byte)nextTurnIdx, 0); }
  public static void addNextRingIdx(FlatBufferBuilder builder, int nextRingIdx) { builder.addByte(6, (byte)nextRingIdx, 0); }
  public static void addState(FlatBufferBuilder builder, int state) { builder.addByte(7, (byte)state, 0); }
  public static void addTimeRemaining(FlatBufferBuilder builder, long timeRemaining) { builder.addLong(8, timeRemaining, 0); }
  public static void addInterrupt(FlatBufferBuilder builder, int interruptOffset) { builder.addOffset(9, interruptOffset, 0); }
  public static int endCMDGameTLMNUpdate(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

