// automatically generated by the FlatBuffers compiler, do not modify

package vn.com.vng.gsmobile.casino.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class GameTLMNInfo extends Table {
  public static GameTLMNInfo getRootAsGameTLMNInfo(ByteBuffer _bb) { return getRootAsGameTLMNInfo(_bb, new GameTLMNInfo()); }
  public static GameTLMNInfo getRootAsGameTLMNInfo(ByteBuffer _bb, GameTLMNInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public GameTLMNInfo __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long roomId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateRoomId(long room_id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, room_id); return true; } else { return false; } }
  public long gameId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateGameId(long game_id) { int o = __offset(6); if (o != 0) { bb.putLong(o + bb_pos, game_id); return true; } else { return false; } }
  public int state() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateState(int state) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, (byte)state); return true; } else { return false; } }
  public long timeRemaining() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateTimeRemaining(long time_remaining) { int o = __offset(10); if (o != 0) { bb.putLong(o + bb_pos, time_remaining); return true; } else { return false; } }
  public int playerIdx() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutatePlayerIdx(int player_idx) { int o = __offset(12); if (o != 0) { bb.put(o + bb_pos, (byte)player_idx); return true; } else { return false; } }
  public int ringIdx() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateRingIdx(int ring_idx) { int o = __offset(14); if (o != 0) { bb.put(o + bb_pos, (byte)ring_idx); return true; } else { return false; } }
  public int turnIdx() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateTurnIdx(int turn_idx) { int o = __offset(16); if (o != 0) { bb.put(o + bb_pos, (byte)turn_idx); return true; } else { return false; } }
  public PlayerTLMNCardInfo cardList(int j) { return cardList(new PlayerTLMNCardInfo(), j); }
  public PlayerTLMNCardInfo cardList(PlayerTLMNCardInfo obj, int j) { int o = __offset(18); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int cardListLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public vn.com.vng.gsmobile.casino.flatbuffers.GameResultInfo result(int j) { return result(new vn.com.vng.gsmobile.casino.flatbuffers.GameResultInfo(), j); }
  public vn.com.vng.gsmobile.casino.flatbuffers.GameResultInfo result(vn.com.vng.gsmobile.casino.flatbuffers.GameResultInfo obj, int j) { int o = __offset(20); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int resultLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public GameTLMNInterruptInfo interruptList(int j) { return interruptList(new GameTLMNInterruptInfo(), j); }
  public GameTLMNInterruptInfo interruptList(GameTLMNInterruptInfo obj, int j) { int o = __offset(22); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int interruptListLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public int cardMinRequire() { int o = __offset(24); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateCardMinRequire(int card_min_require) { int o = __offset(24); if (o != 0) { bb.put(o + bb_pos, (byte)card_min_require); return true; } else { return false; } }

  public static int createGameTLMNInfo(FlatBufferBuilder builder,
      long room_id,
      long game_id,
      int state,
      long time_remaining,
      int player_idx,
      int ring_idx,
      int turn_idx,
      int card_listOffset,
      int resultOffset,
      int interrupt_listOffset,
      int card_min_require) {
    builder.startObject(11);
    GameTLMNInfo.addTimeRemaining(builder, time_remaining);
    GameTLMNInfo.addGameId(builder, game_id);
    GameTLMNInfo.addRoomId(builder, room_id);
    GameTLMNInfo.addInterruptList(builder, interrupt_listOffset);
    GameTLMNInfo.addResult(builder, resultOffset);
    GameTLMNInfo.addCardList(builder, card_listOffset);
    GameTLMNInfo.addCardMinRequire(builder, card_min_require);
    GameTLMNInfo.addTurnIdx(builder, turn_idx);
    GameTLMNInfo.addRingIdx(builder, ring_idx);
    GameTLMNInfo.addPlayerIdx(builder, player_idx);
    GameTLMNInfo.addState(builder, state);
    return GameTLMNInfo.endGameTLMNInfo(builder);
  }

  public static void startGameTLMNInfo(FlatBufferBuilder builder) { builder.startObject(11); }
  public static void addRoomId(FlatBufferBuilder builder, long roomId) { builder.addLong(0, roomId, 0); }
  public static void addGameId(FlatBufferBuilder builder, long gameId) { builder.addLong(1, gameId, 0); }
  public static void addState(FlatBufferBuilder builder, int state) { builder.addByte(2, (byte)state, 0); }
  public static void addTimeRemaining(FlatBufferBuilder builder, long timeRemaining) { builder.addLong(3, timeRemaining, 0); }
  public static void addPlayerIdx(FlatBufferBuilder builder, int playerIdx) { builder.addByte(4, (byte)playerIdx, 0); }
  public static void addRingIdx(FlatBufferBuilder builder, int ringIdx) { builder.addByte(5, (byte)ringIdx, 0); }
  public static void addTurnIdx(FlatBufferBuilder builder, int turnIdx) { builder.addByte(6, (byte)turnIdx, 0); }
  public static void addCardList(FlatBufferBuilder builder, int cardListOffset) { builder.addOffset(7, cardListOffset, 0); }
  public static int createCardListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCardListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addResult(FlatBufferBuilder builder, int resultOffset) { builder.addOffset(8, resultOffset, 0); }
  public static int createResultVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startResultVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addInterruptList(FlatBufferBuilder builder, int interruptListOffset) { builder.addOffset(9, interruptListOffset, 0); }
  public static int createInterruptListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInterruptListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCardMinRequire(FlatBufferBuilder builder, int cardMinRequire) { builder.addByte(10, (byte)cardMinRequire, 0); }
  public static int endGameTLMNInfo(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

