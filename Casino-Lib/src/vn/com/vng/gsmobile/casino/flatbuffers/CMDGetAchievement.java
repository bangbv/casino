// automatically generated by the FlatBuffers compiler, do not modify

package vn.com.vng.gsmobile.casino.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CMDGetAchievement extends Table {
  public static CMDGetAchievement getRootAsCMDGetAchievement(ByteBuffer _bb) { return getRootAsCMDGetAchievement(_bb, new CMDGetAchievement()); }
  public static CMDGetAchievement getRootAsCMDGetAchievement(ByteBuffer _bb, CMDGetAchievement obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public CMDGetAchievement __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long uid() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateUid(long uid) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, uid); return true; } else { return false; } }
  public UserAchievement achievementList(int j) { return achievementList(new UserAchievement(), j); }
  public UserAchievement achievementList(UserAchievement obj, int j) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int achievementListLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public UserAchievement dailyMissionList(int j) { return dailyMissionList(new UserAchievement(), j); }
  public UserAchievement dailyMissionList(UserAchievement obj, int j) { int o = __offset(8); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int dailyMissionListLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createCMDGetAchievement(FlatBufferBuilder builder,
      long uid,
      int achievement_listOffset,
      int daily_mission_listOffset) {
    builder.startObject(3);
    CMDGetAchievement.addUid(builder, uid);
    CMDGetAchievement.addDailyMissionList(builder, daily_mission_listOffset);
    CMDGetAchievement.addAchievementList(builder, achievement_listOffset);
    return CMDGetAchievement.endCMDGetAchievement(builder);
  }

  public static void startCMDGetAchievement(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addUid(FlatBufferBuilder builder, long uid) { builder.addLong(0, uid, 0); }
  public static void addAchievementList(FlatBufferBuilder builder, int achievementListOffset) { builder.addOffset(1, achievementListOffset, 0); }
  public static int createAchievementListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAchievementListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDailyMissionList(FlatBufferBuilder builder, int dailyMissionListOffset) { builder.addOffset(2, dailyMissionListOffset, 0); }
  public static int createDailyMissionListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDailyMissionListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endCMDGetAchievement(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

