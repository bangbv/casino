// automatically generated by the FlatBuffers compiler, do not modify

package vn.com.vng.gsmobile.casino.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CMDGetLobbyUsers extends Table {
  public static CMDGetLobbyUsers getRootAsCMDGetLobbyUsers(ByteBuffer _bb) { return getRootAsCMDGetLobbyUsers(_bb, new CMDGetLobbyUsers()); }
  public static CMDGetLobbyUsers getRootAsCMDGetLobbyUsers(ByteBuffer _bb, CMDGetLobbyUsers obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public CMDGetLobbyUsers __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long uid() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateUid(long uid) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, uid); return true; } else { return false; } }
  public int gameType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateGameType(int game_type) { int o = __offset(6); if (o != 0) { bb.put(o + bb_pos, (byte)game_type); return true; } else { return false; } }
  public int lobbyType() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateLobbyType(int lobby_type) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, (byte)lobby_type); return true; } else { return false; } }
  public long roomId() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateRoomId(long room_id) { int o = __offset(10); if (o != 0) { bb.putLong(o + bb_pos, room_id); return true; } else { return false; } }
  public long offset() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0; }
  public boolean mutateOffset(long offset) { int o = __offset(12); if (o != 0) { bb.putInt(o + bb_pos, (int)offset); return true; } else { return false; } }
  public long uidList(int j) { int o = __offset(14); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int uidListLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer uidListAsByteBuffer() { return __vector_as_bytebuffer(14, 8); }
  public boolean mutateUidList(int j, long uid_list) { int o = __offset(14); if (o != 0) { bb.putLong(__vector(o) + j * 8, uid_list); return true; } else { return false; } }

  public static int createCMDGetLobbyUsers(FlatBufferBuilder builder,
      long uid,
      int game_type,
      int lobby_type,
      long room_id,
      long offset,
      int uid_listOffset) {
    builder.startObject(6);
    CMDGetLobbyUsers.addRoomId(builder, room_id);
    CMDGetLobbyUsers.addUid(builder, uid);
    CMDGetLobbyUsers.addUidList(builder, uid_listOffset);
    CMDGetLobbyUsers.addOffset(builder, offset);
    CMDGetLobbyUsers.addLobbyType(builder, lobby_type);
    CMDGetLobbyUsers.addGameType(builder, game_type);
    return CMDGetLobbyUsers.endCMDGetLobbyUsers(builder);
  }

  public static void startCMDGetLobbyUsers(FlatBufferBuilder builder) { builder.startObject(6); }
  public static void addUid(FlatBufferBuilder builder, long uid) { builder.addLong(0, uid, 0); }
  public static void addGameType(FlatBufferBuilder builder, int gameType) { builder.addByte(1, (byte)gameType, 0); }
  public static void addLobbyType(FlatBufferBuilder builder, int lobbyType) { builder.addByte(2, (byte)lobbyType, 0); }
  public static void addRoomId(FlatBufferBuilder builder, long roomId) { builder.addLong(3, roomId, 0); }
  public static void addOffset(FlatBufferBuilder builder, long offset) { builder.addInt(4, (int)offset, 0); }
  public static void addUidList(FlatBufferBuilder builder, int uidListOffset) { builder.addOffset(5, uidListOffset, 0); }
  public static int createUidListVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startUidListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endCMDGetLobbyUsers(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

