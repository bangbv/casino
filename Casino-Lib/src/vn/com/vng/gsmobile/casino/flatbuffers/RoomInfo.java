// automatically generated by the FlatBuffers compiler, do not modify

package vn.com.vng.gsmobile.casino.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RoomInfo extends Table {
  public static RoomInfo getRootAsRoomInfo(ByteBuffer _bb) { return getRootAsRoomInfo(_bb, new RoomInfo()); }
  public static RoomInfo getRootAsRoomInfo(ByteBuffer _bb, RoomInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public RoomInfo __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long id() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateId(long id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, id); return true; } else { return false; } }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public long betValue() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0; }
  public boolean mutateBetValue(long bet_value) { int o = __offset(8); if (o != 0) { bb.putInt(o + bb_pos, (int)bet_value); return true; } else { return false; } }
  public long requireCoin() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0; }
  public boolean mutateRequireCoin(long require_coin) { int o = __offset(10); if (o != 0) { bb.putInt(o + bb_pos, (int)require_coin); return true; } else { return false; } }
  public int requireLevel() { int o = __offset(12); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean mutateRequireLevel(int require_level) { int o = __offset(12); if (o != 0) { bb.putShort(o + bb_pos, (short)require_level); return true; } else { return false; } }
  public String password() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer passwordAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public int sitList(int j) { int o = __offset(16); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int sitListLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer sitListAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public boolean mutateSitList(int j, int sit_list) { int o = __offset(16); if (o != 0) { bb.put(__vector(o) + j * 1, (byte)sit_list); return true; } else { return false; } }
  public int tip() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateTip(int tip) { int o = __offset(18); if (o != 0) { bb.put(o + bb_pos, (byte)tip); return true; } else { return false; } }
  public int state() { int o = __offset(20); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateState(int state) { int o = __offset(20); if (o != 0) { bb.put(o + bb_pos, (byte)state); return true; } else { return false; } }
  public RoomDetailInfo detail() { return detail(new RoomDetailInfo()); }
  public RoomDetailInfo detail(RoomDetailInfo obj) { int o = __offset(22); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
  public String description() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public int bigBet() { int o = __offset(26); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateBigBet(int big_bet) { int o = __offset(26); if (o != 0) { bb.put(o + bb_pos, (byte)big_bet); return true; } else { return false; } }

  public static int createRoomInfo(FlatBufferBuilder builder,
      long id,
      int nameOffset,
      long bet_value,
      long require_coin,
      int require_level,
      int passwordOffset,
      int sit_listOffset,
      int tip,
      int state,
      int detailOffset,
      int descriptionOffset,
      int big_bet) {
    builder.startObject(12);
    RoomInfo.addId(builder, id);
    RoomInfo.addDescription(builder, descriptionOffset);
    RoomInfo.addDetail(builder, detailOffset);
    RoomInfo.addSitList(builder, sit_listOffset);
    RoomInfo.addPassword(builder, passwordOffset);
    RoomInfo.addRequireCoin(builder, require_coin);
    RoomInfo.addBetValue(builder, bet_value);
    RoomInfo.addName(builder, nameOffset);
    RoomInfo.addRequireLevel(builder, require_level);
    RoomInfo.addBigBet(builder, big_bet);
    RoomInfo.addState(builder, state);
    RoomInfo.addTip(builder, tip);
    return RoomInfo.endRoomInfo(builder);
  }

  public static void startRoomInfo(FlatBufferBuilder builder) { builder.startObject(12); }
  public static void addId(FlatBufferBuilder builder, long id) { builder.addLong(0, id, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addBetValue(FlatBufferBuilder builder, long betValue) { builder.addInt(2, (int)betValue, 0); }
  public static void addRequireCoin(FlatBufferBuilder builder, long requireCoin) { builder.addInt(3, (int)requireCoin, 0); }
  public static void addRequireLevel(FlatBufferBuilder builder, int requireLevel) { builder.addShort(4, (short)requireLevel, 0); }
  public static void addPassword(FlatBufferBuilder builder, int passwordOffset) { builder.addOffset(5, passwordOffset, 0); }
  public static void addSitList(FlatBufferBuilder builder, int sitListOffset) { builder.addOffset(6, sitListOffset, 0); }
  public static int createSitListVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startSitListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addTip(FlatBufferBuilder builder, int tip) { builder.addByte(7, (byte)tip, 0); }
  public static void addState(FlatBufferBuilder builder, int state) { builder.addByte(8, (byte)state, 0); }
  public static void addDetail(FlatBufferBuilder builder, int detailOffset) { builder.addOffset(9, detailOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(10, descriptionOffset, 0); }
  public static void addBigBet(FlatBufferBuilder builder, int bigBet) { builder.addByte(11, (byte)bigBet, 0); }
  public static int endRoomInfo(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

