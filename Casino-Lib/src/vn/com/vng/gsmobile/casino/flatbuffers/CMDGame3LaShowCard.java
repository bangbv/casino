// automatically generated by the FlatBuffers compiler, do not modify

package vn.com.vng.gsmobile.casino.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CMDGame3LaShowCard extends Table {
  public static CMDGame3LaShowCard getRootAsCMDGame3LaShowCard(ByteBuffer _bb) { return getRootAsCMDGame3LaShowCard(_bb, new CMDGame3LaShowCard()); }
  public static CMDGame3LaShowCard getRootAsCMDGame3LaShowCard(ByteBuffer _bb, CMDGame3LaShowCard obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public CMDGame3LaShowCard __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long roomId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateRoomId(long room_id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, room_id); return true; } else { return false; } }
  public long gameId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public boolean mutateGameId(long game_id) { int o = __offset(6); if (o != 0) { bb.putLong(o + bb_pos, game_id); return true; } else { return false; } }
  public int userIndex() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateUserIndex(int user_index) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, (byte)user_index); return true; } else { return false; } }
  public int showedCards(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int showedCardsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer showedCardsAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public boolean mutateShowedCards(int j, int showed_cards) { int o = __offset(10); if (o != 0) { bb.put(__vector(o) + j * 1, (byte)showed_cards); return true; } else { return false; } }

  public static int createCMDGame3LaShowCard(FlatBufferBuilder builder,
      long room_id,
      long game_id,
      int user_index,
      int showed_cardsOffset) {
    builder.startObject(4);
    CMDGame3LaShowCard.addGameId(builder, game_id);
    CMDGame3LaShowCard.addRoomId(builder, room_id);
    CMDGame3LaShowCard.addShowedCards(builder, showed_cardsOffset);
    CMDGame3LaShowCard.addUserIndex(builder, user_index);
    return CMDGame3LaShowCard.endCMDGame3LaShowCard(builder);
  }

  public static void startCMDGame3LaShowCard(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addRoomId(FlatBufferBuilder builder, long roomId) { builder.addLong(0, roomId, 0); }
  public static void addGameId(FlatBufferBuilder builder, long gameId) { builder.addLong(1, gameId, 0); }
  public static void addUserIndex(FlatBufferBuilder builder, int userIndex) { builder.addByte(2, (byte)userIndex, 0); }
  public static void addShowedCards(FlatBufferBuilder builder, int showedCardsOffset) { builder.addOffset(3, showedCardsOffset, 0); }
  public static int createShowedCardsVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startShowedCardsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endCMDGame3LaShowCard(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

